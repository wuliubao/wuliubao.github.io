---
layout: post
title:  "从 IOC 到 谈恋爱"
date:   2019-08-28 23:06:18 +0800
categories: jekyll update
---

最近和小伙伴们一起端对端搭起了一个平台。服务端是用Spring Boot搭建的。项目弄的差不多后，大家一起review代码。说到Spring蛮，肯定离不开IOC，小伙伴稍微说了下IOC，一下子挑起了我的神经。无奈时间仓促，我来没来得及发表一下自己的愚见，就结束了。回来想想，还是写篇博文谈谈自己的一些感受吧。

最早看到IOC（Inversion of Control）控制反转、DI（Dependency Injection）依赖注入，是在某一本讲设计模式的书上。当时没啥项目经验，也不是太懂有啥好处。后来随着时光的飞逝，IOC让我对人生的一些道理，由`了解` 到 `懂得`。

IOC与DI，相对而言就是：控制正常运转，正常依赖。我们在一个对象A内部实例化一个对象B，就是对象A依赖对象B，对象A控制对象B做一些操作。比如对象A：刘宝，对象B：锤子。我要用锤子做一些事，这时我的内部就该实例化一个锤子对象。我就`依赖`了锤子，我`控制`锤子`打人`和`砸电脑`。有一天来了一把砍刀，这个很酷，我要用，这个时候我又要在我内部再实例化一个砍刀，我`依赖`了砍刀，我`控制`砍刀`砍人`和`砸电脑`。又一天，来了一把98K。。我。。又要。。好累。。

小时候大家都算过1+2+...+100。同理正着太累就反着来。锤子、砍刀、98K，他们能为我提供的方法就是`打/砍/狙人`和`砸电脑`。那我现在不关心内部有声明，反正拿到手，可以`打/砍/狙人`和`砸电脑`就行。这个时候我就被`注入`了依赖。反过来锤子、砍刀、98K制定了一些了标准，比如`打/砍/狙人`和`砸电脑`，也许他们还定义了`打/砍/狙自己`，我如果想用他们，只能接受，控制出现了反转。。

IOC是Spring最核心的思想，网上介绍的牛文也很多。Bean就是个IOC容器。Spring Boot更是方便，通过注解管理使用、自动配置，我们只需在controller层，使用Request/Request/Get/Post等注解就可以解析各种http业务。如果直接使用servlet的话，就需要继承一个HttpServlet类，然后复写doGet和doPost方法了。本来一个http请求要查找各种依赖对象，我写的业务代码需要控制框架做一些事。现在相反，各种依赖的对象都被动的传递进来，我按照Spring的标准写着各种业务逻辑。

再看看近几年客户端、前端的发展,其实和IOC的思想也是一样。从以前的原生GUI开发到MVVM模式、声明式编程，都能感觉到一种IOC的感觉。最早不同平台、不同语言写GUI的方式都差不多，比如我想获取页面上的某个元素，然后让它透明。首先获取UI元素，Qt是findChild、findChildren，Android是findViewById，ios通过拖拽获取相同变量名或xxxWithIdentifier，Web是通过getElementByxx，然后再对这个元素对象使用对应set*（设置透明）方法。这样的流程就有一股命令、控制的感觉，也有人称为命令式编程。对应界面上的元素多了，find，set代码也就多了，开发者也会越来越暴躁。。后来渐渐的出现了一些MVVM、声明式的框架：AngularJS、React、AndroidX、RxSwift、Flutter等等。他们更多的是把某个状态，比如“透明”、“大小”通过视图模型（View Model）直接与数据绑定，只要数据发生变化，UI上也发生变化，不用再在代码里写控制了。

`这些设计，不管是在服务端还是客户端，都将很多控制细节对开发者隐藏。让开发者更加专注于具体的业务逻辑，同时也让代码很好的解耦。`我的理解大概的对代码进行划分，分为`控制代码`和`业务代码`。控制代码：对数据类型、数据结构、数据容器、类、封装API、封装接口、封装框架的操作（读写）、内存资源管理等一些偏底层逻辑、语言特性代码。业务代码：功能性、逻辑判断、业务需求的代码。当我们把这两种代码IOC后，解耦后，业务代码就相对不太依赖语言、框架，移植出来也更加方便。

`联想一下，IOC也是一种管理模式。`

两个团队在一起合作，比如前台和后台。前台需要依赖后台数据，随着用户越来越多，后台数据也千差万别，到前台就越来越复杂了，一会儿双方就会忙的不可开交。如果这时候前台和后台定一个标准的框架、布局、组件，然后传递输入数据，这样就是一个干净简明的系统了。

举个现实中的管理例子：国内机票分销系统。民用航空机票分销系统简称：GDS（Global Distribution System）全球分销系统，国外有几个不同的代理系统。国内只有中航信一家的系统。不管是携程、飞猪、去哪儿都是通过中航信的数据库来做机票查询、销售操作的。国内40几家航空公司的机票业务系统都是建立在中航信基础上的。这就是一个典型的IOC例子，机票的销售都是通过中航信制定的标准来的，携程、飞猪、去哪儿这些OTA商家不管占了多少销售量，都很难自己来随心所欲的控制机票及航空公司的计划。当然这个反转的不是太好，因为就他一家分销系统。传统的商品分销模式，分销商则占很大话语权。一个工厂要把商品分销到全国各地，需要不同的分销渠道，不同的分销渠道有不同的玩法，每增加一个渠道就需要新加一些流程，慢慢的工厂就比较依赖各个分销商。比如很多电视厂商就抱怨苏宁乱搞价格促销，我上大学时，想给我老家工厂的一个音响厂做网店。结果那个工厂老板竟然这样说：怕网店做大了，他的分销商就不进他的货了。如果工厂制定了自己的一个业务标准，让符合这个标准的人当工厂的分销商，这个时候各个分销商反过来就依赖工厂的标准了。

`突然感觉谈恋爱也是这个道理`，我喜欢小花，我就按照自己的感觉，给她买花。我喜欢小丽，我就想她是不是饿了，请她吃饭。到头来，她们都不愿意和我在一起，因为她们感觉被控制了，会有种`压迫`、`捆绑`、`奉承`、`自我`的意味。这个时候不如想想小花的标准，然后内部实例化一个小花标准的对象，这个时候就可以吸引到小花，然后再实例化一个小丽的标准对象，这个时候就可以吸引到小丽了。这样自己得到了提升，同样吸引了合适的妹子。大家在一起靠的就是`共性`和`吸引`了，两全其美啊。不过，如果实例化的结果是虚假的，或者老是实例化，也就是渣男了。

说到这里，我又想起了美剧越狱。那个追捕主角迈克的FBI探员马洪，他有点精神狂躁，需要药物维持，他就喜欢说一句话：sometimes things happen that are just out of your control。我觉得他是不是`控制欲`太强了，如果他知道一些IOC思想的化。。

大卫芬奇的电影本杰明·巴顿奇事有句台词：不顺心的时候，你可以像疯狗一样咆哮，怨天尤人，诅咒命运，悔不当初。但到最后，你还是得放手。

{% highlight ruby %}
人生啊，还是需要放手。
{% endhighlight %}

IOC是一种智慧。
